!function(Q){var F={};function B(I){if(F[I])return F[I].exports;var s=F[I]={i:I,l:!1,exports:{}};return Q[I].call(s.exports,s,s.exports,B),s.l=!0,s.exports}B.m=Q,B.c=F,B.d=function(Q,F,I){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:I})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var I=Object.create(null);if(B.r(I),Object.defineProperty(I,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var s in Q)B.d(I,s,function(F){return Q[F]}.bind(null,s));return I},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/js/util.js\n/**\n * Generic debounce utility\n * \n * @param {Function} fn \n * @param {Int} timeout \n */\nfunction debounce(fn, timeout) {\n  var timerInterval = timeout;\n  var timer;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (!timer) {\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(function () {\n      fn.apply(null, args);\n    }, timerInterval);\n  };\n}\n\n\n// CONCATENATED MODULE: ./src/js/autocomplete.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Autocomplete =\n/*#__PURE__*/\nfunction () {\n  function Autocomplete(selector, options) {\n    _classCallCheck(this, Autocomplete);\n\n    this.eleselector = selector;\n    this.options = $.extend({}, options, {});\n    this.containerSelector = this.eleselector.replace('#', '') + '-container';\n    this.items = options.items || [];\n\n    this._initialize();\n  }\n  /**\n   * Initializes the DOM for the autocomplete. Does thhis\n   * eagerly instead of on-demand/on the fly.\n   */\n\n\n  _createClass(Autocomplete, [{\n    key: \"_initialize\",\n    value: function _initialize() {\n      if ($(this.containerSelector).length == 0) {\n        $('body').append('<div id=\"' + this.containerSelector + '\"></div>');\n      }\n\n      this._attachEvents();\n    }\n    /**\n     * handles only the click/select event. However we can\n     * handle keyboard naviagtion to move up/down.\n     */\n\n  }, {\n    key: \"_attachEvents\",\n    value: function _attachEvents() {\n      var that = this;\n      $(this.containerSelector).on('click', 'a', function () {\n        var targetEle = event.target;\n        var selectedValue = targetEle.dataset.name;\n        that.options.select && that.options.select($(that.eleselector), selectedValue);\n      });\n    }\n    /**\n     *  Opens the autocomplete list\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      $(this.containerSelector).show();\n    }\n    /**\n     * Close the autocomplete list.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      $(this.containerSelector).hide();\n    }\n  }, {\n    key: \"setItems\",\n    value: function setItems(items) {\n      this.items = items;\n      this.generateList();\n    }\n  }, {\n    key: \"generateList\",\n    value: function generateList() {\n      var html = \"<ul><li>\" + this.items.map(function (item) {\n        return \"<a href='' data-name='\" + item + \"'>\" + item + \"</a>\";\n      }).reduce(function (a, b) {\n        return a + \"</li><li>\" + b;\n      }) + \"</li><ul>\";\n      $(this.containerSelector).html(html);\n    }\n  }, {\n    key: \"render\",\n    value: function render(items) {\n      this.setItems(items);\n      this.open();\n    }\n  }]);\n\n  return Autocomplete;\n}();\n\n\n// CONCATENATED MODULE: ./src/js/Suggestion.js\n/**\n * @param word to get the suggestion from\n * @returns Promise \n */\nvar lastWord, lastWordPromise;\n\nfunction wordSuggestions(word) {\n  var defer = $.Deferred();\n  var matches = ['_pre_$', '_pre_$_post', '$_post'];\n  var to_return = {\n    word: word,\n    matches: matches.map(function (a) {\n      return a.replace('$', word);\n    }).concat([word])\n  }; //random timeout\n\n  setTimeout(function () {\n    defer.resolve(to_return);\n  }, Math.floor(Math.random * 1000));\n  return defer.promise();\n}\n/**\n * hanldes the out of order suggestions properly.\n */\n\n\nfunction getSuggestions(word) {\n  if (lastWordPromise) {\n    getWords(word);\n    return lastWordPromise;\n  }\n\n  var defer = new $.Deferred();\n  lastWordPromise = defer.promise();\n  lastWord = word;\n\n  function getWords(wrd) {\n    wordSuggestions(wrd).done(function (res) {\n      if (res && res.word == lastWord) {\n        defer.resolve(res.matches);\n      }\n\n      lastWordPromise = null;\n      lastWord = null;\n    });\n  }\n\n  getWords(word);\n  return lastWordPromise;\n}\n\n\n// CONCATENATED MODULE: ./src/js/app.js\n/**\n * Initializer\n */\n\n\n\n\nwindow.onload = function () {\n  var autoComplete = new Autocomplete('#searchBox', {\n    select: autoCompletSelector\n  }); // debounce it for 100ms\n\n  $('#searchBox').on('keyup', debounce(function (event, ui) {\n    var selStart = event.target.selectionStart;\n    var selEnd = event.target.selectionEnd;\n    var value = $(event.target).val();\n    var wordToGetSuggestion;\n\n    if (selStart == selEnd && selEnd == value.length) {\n      //cursor is at the last position\n      //get the last word.\n      wordToGetSuggestion = value.split(' ').pop();\n    } else {\n      //if selection has multiple words, then we get the\n      //first word\n      wordToGetSuggestion = value.substr(selStart).split(' ').pop(0);\n    }\n\n    ;\n    getSuggestions(wordToGetSuggestion).done(function (matches) {\n      autoComplete.render(matches);\n    });\n  }, 100));\n\n  var autoCompletSelector = function autoCompletSelector(ele, selectedItem) {\n    var existingValue = ele.val();\n    var values = existingValue.split(' ');\n    var selectedValue = selectedItem; // store the last cursor position, \n\n    var cursorPosition = ele.data('cursor');\n\n    if (cursorPosition == existingValue.length) {\n      values.pop();\n      values.push(selectedItem);\n      to_set = values.join(' ');\n    }\n\n    var before = existingValue.substr(0, cursorPosition).lastIndexOf(' ');\n    var after = existingValue.substr(cursorPosition).indexOf(' ');\n\n    if (before != -1) {\n      to_set = existingValue.substr(0, before) + ' ';\n    }\n\n    to_set = selectedItem;\n\n    if (after != -1) {\n      to_set = existingValue.substr(0, after);\n    }\n\n    ele.value(to_set); // after selecting it close it.\n\n    autoComplete.close();\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);