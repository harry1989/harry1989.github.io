!function(Q){var B={};function F(I){if(B[I])return B[I].exports;var U=B[I]={i:I,l:!1,exports:{}};return Q[I].call(U.exports,U,U.exports,F),U.l=!0,U.exports}F.m=Q,F.c=B,F.d=function(Q,B,I){F.o(Q,B)||Object.defineProperty(Q,B,{enumerable:!0,get:I})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,B){if(1&B&&(Q=F(Q)),8&B)return Q;if(4&B&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var I=Object.create(null);if(F.r(I),Object.defineProperty(I,"default",{enumerable:!0,value:Q}),2&B&&"string"!=typeof Q)for(var U in Q)F.d(I,U,function(B){return Q[B]}.bind(null,U));return I},F.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(B,"a",B),B},F.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},F.p="",F(F.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/js/util.js\n/**\n * Generic debounce utility\n * \n * @param {Function} fn \n * @param {Int} timeout \n */\nfunction debounce(fn, timeout) {\n  var timerInterval = timeout;\n  var timer;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (!timer) {\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(function () {\n      fn.apply(null, args);\n    }, timerInterval);\n  };\n}\n\n\n// CONCATENATED MODULE: ./src/js/autocomplete.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Autocomplete =\n/*#__PURE__*/\nfunction () {\n  function Autocomplete(selector, options) {\n    _classCallCheck(this, Autocomplete);\n\n    this.eleselector = selector;\n    this.options = $.extend({}, options, {});\n    this.containerSelector = this.eleselector + '-container';\n    this.items = options.items || [];\n  }\n  /**\n   * Initializes the DOM for the autocomplete. Does thhis\n   * eagerly instead of on-demand/on the fly.\n   */\n\n\n  _createClass(Autocomplete, [{\n    key: \"_initialize\",\n    value: function _initialize() {\n      if ($(this.containerSelector).length == 0) {\n        $('body').append('<div id=\"' + this.containerSelector + '\"></div>');\n      }\n\n      this._attachEvents();\n    }\n    /**\n     * handles only the click/select event. However we can\n     * handle keyboard naviagtion to move up/down.\n     */\n\n  }, {\n    key: \"_attachEvents\",\n    value: function _attachEvents() {\n      var that = this;\n      $(this.containerSelector).on('click', 'a', function () {\n        var targetEle = event.target;\n        var selectedValue = targetEle.dataset.name;\n        that.options.select && that.options.select($(that.eleselector), selectedValue);\n      });\n    }\n    /**\n     *  Opens the autocomplete list\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      $(this.containerSelector).show();\n    }\n    /**\n     * Close the autocomplete list.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      $(this.containerSelector).hide();\n    }\n  }, {\n    key: \"setItems\",\n    value: function setItems(items) {\n      this.items = items;\n      this.generateList();\n    }\n  }, {\n    key: \"generateList\",\n    value: function generateList() {\n      var html = \"<ul><li>\" + this.items.map(function (item) {\n        return \"<a href='' data-name='\" + item + \"'>\" + item + \"</a>\";\n      }).reduce(function (a, b) {\n        return a + \"</li><li>\" + b;\n      }) + \"</li><ul>\";\n      $(this.containerSelector).html(html);\n    }\n  }, {\n    key: \"render\",\n    value: function render(items) {\n      this.setItems(items);\n      this.open();\n    }\n  }]);\n\n  return Autocomplete;\n}();\n\n\n// CONCATENATED MODULE: ./src/js/Suggestion.js\n/**\n * @param word to get the suggestion from\n * @returns Promise \n */\nvar lastWord, lastWordPromise;\n\nfunction wordSuggestions(word) {\n  var defer = $.Deferred();\n  var matches = ['_pre_$', '_pre_$_post', '$_post'];\n  var to_return = {\n    word: word,\n    matches: matches.map(function (a) {\n      return a.replace('$', word);\n    }) + [word]\n  }; //random timeout\n\n  setTimeout(function () {\n    defer.resolve(to_return);\n  }, Math.floor(Math.random * 1000));\n  return defer.promise();\n}\n/**\n * hanldes the out of order suggestions properly.\n */\n\n\nfunction getSuggestions(word) {\n  if (lastWordPromise) {\n    getWords(word);\n    return lastWordPromise;\n  }\n\n  var defer = new $.Deferred();\n  lastWordPromise = defer.promise();\n  lastWord = word;\n\n  function getWords(wrd) {\n    wordSuggestions(wrd).done(function (res) {\n      if (res && res.word == lastWord) {\n        defer.resolve(res.matches);\n      }\n\n      lastWordPromise = null;\n      lastWord = null;\n    });\n  }\n\n  getWords();\n  return lastWordPromise;\n}\n\n\n// CONCATENATED MODULE: ./src/js/app.js\n/**\n * Initializer\n */\n\n\n\n\nwindow.onload = function () {\n  var autoComplete = new Autocomplete('#searchBox', {\n    select: autoCompletSelector\n  }); // debounce it for 100ms\n\n  $('#searchBox').on('keyup', debounce(function (event, ui) {\n    var selStart = event.target.selectionStart;\n    var selEnd = event.target.selectionEnd;\n    var value = $(event.target).val();\n    var wordToGetSuggestion;\n\n    if (selStart == selEnd && selEnd == value.length) {\n      //cursor is at the last position\n      //get the last word.\n      wordToGetSuggestion = value.split(' ').pop();\n    } else {\n      //if selection has multiple words, then we get the\n      //first word\n      wordToGetSuggestion = value.substr(selStart).split(' ').pop(0);\n    }\n\n    ;\n    getSuggestions(wordToGetSuggestion).done(function (matches) {\n      autoComplete.renderItems(matches);\n    });\n  }, 100));\n\n  var autoCompletSelector = function autoCompletSelector(ele, selectedItem) {\n    var existingValue = ele.val();\n    var values = existingValue.split(' ');\n    var selectedValue = selectedItem; // store the last cursor position, \n\n    var cursorPosition = ele.data('cursor');\n\n    if (cursorPosition == existingValue.length) {\n      values.pop();\n      values.push(selectedItem);\n      to_set = values.join(' ');\n    }\n\n    var before = existingValue.substr(0, cursorPosition).lastIndexOf(' ');\n    var after = existingValue.substr(cursorPosition).indexOf(' ');\n\n    if (before != -1) {\n      to_set = existingValue.substr(0, before) + ' ';\n    }\n\n    to_set = selectedItem;\n\n    if (after != -1) {\n      to_set = existingValue.substr(0, after);\n    }\n\n    ele.value(to_set); // after selecting it close it.\n\n    autoComplete.close();\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbC5qcz9mNjQ0Iiwid2VicGFjazovLy8uL3NyYy9qcy9hdXRvY29tcGxldGUuanM/NjQ3YiIsIndlYnBhY2s6Ly8vLi9zcmMvanMvU3VnZ2VzdGlvbi5qcz8zNDZhIiwid2VicGFjazovLy8uL3NyYy9qcy9hcHAuanM/OTBlOSJdLCJuYW1lcyI6WyJkZWJvdW5jZSIsImZuIiwidGltZW91dCIsInRpbWVySW50ZXJ2YWwiLCJ0aW1lciIsImFyZ3MiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJBdXRvY29tcGxldGUiLCJzZWxlY3RvciIsIm9wdGlvbnMiLCJlbGVzZWxlY3RvciIsIiQiLCJleHRlbmQiLCJjb250YWluZXJTZWxlY3RvciIsIml0ZW1zIiwibGVuZ3RoIiwiYXBwZW5kIiwiX2F0dGFjaEV2ZW50cyIsInRoYXQiLCJvbiIsInRhcmdldEVsZSIsImV2ZW50IiwidGFyZ2V0Iiwic2VsZWN0ZWRWYWx1ZSIsImRhdGFzZXQiLCJuYW1lIiwic2VsZWN0Iiwic2hvdyIsImhpZGUiLCJnZW5lcmF0ZUxpc3QiLCJodG1sIiwibWFwIiwiaXRlbSIsInJlZHVjZSIsImEiLCJiIiwic2V0SXRlbXMiLCJvcGVuIiwibGFzdFdvcmQiLCJsYXN0V29yZFByb21pc2UiLCJ3b3JkU3VnZ2VzdGlvbnMiLCJ3b3JkIiwiZGVmZXIiLCJEZWZlcnJlZCIsIm1hdGNoZXMiLCJ0b19yZXR1cm4iLCJyZXBsYWNlIiwicmVzb2x2ZSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInByb21pc2UiLCJnZXRTdWdnZXN0aW9ucyIsImdldFdvcmRzIiwid3JkIiwiZG9uZSIsInJlcyIsIndpbmRvdyIsIm9ubG9hZCIsImF1dG9Db21wbGV0ZSIsImF1dG9Db21wbGV0U2VsZWN0b3IiLCJ1aSIsInNlbFN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxFbmQiLCJzZWxlY3Rpb25FbmQiLCJ2YWx1ZSIsInZhbCIsIndvcmRUb0dldFN1Z2dlc3Rpb24iLCJzcGxpdCIsInBvcCIsInN1YnN0ciIsInJlbmRlckl0ZW1zIiwiZWxlIiwic2VsZWN0ZWRJdGVtIiwiZXhpc3RpbmdWYWx1ZSIsInZhbHVlcyIsImN1cnNvclBvc2l0aW9uIiwiZGF0YSIsInB1c2giLCJ0b19zZXQiLCJqb2luIiwiYmVmb3JlIiwibGFzdEluZGV4T2YiLCJhZnRlciIsImluZGV4T2YiLCJjbG9zZSJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7OztBQU1BLFNBQVNBLFFBQVQsQ0FBa0JDLEVBQWxCLEVBQXNCQyxPQUF0QixFQUE4QjtBQUMxQixNQUFNQyxhQUFhLEdBQUdELE9BQXRCO0FBQ0EsTUFBSUUsS0FBSjtBQUVBLFNBQU8sWUFBaUI7QUFBQSxzQ0FBTEMsSUFBSztBQUFMQSxVQUFLO0FBQUE7O0FBQ3BCLFFBQUcsQ0FBQ0QsS0FBSixFQUFVO0FBQ05FLGtCQUFZLENBQUNGLEtBQUQsQ0FBWjtBQUNIOztBQUNEQSxTQUFLLEdBQUdHLFVBQVUsQ0FBQyxZQUFVO0FBQ3pCTixRQUFFLENBQUNPLEtBQUgsQ0FBUyxJQUFULEVBQWVILElBQWY7QUFDSCxLQUZpQixFQUVmRixhQUZlLENBQWxCO0FBR0gsR0FQRDtBQVFIOzs7Ozs7Ozs7O0lDbEJvQk0sWTs7O0FBRWpCLHdCQUFZQyxRQUFaLEVBQXNCQyxPQUF0QixFQUE4QjtBQUFBOztBQUMxQixTQUFLQyxXQUFMLEdBQW1CRixRQUFuQjtBQUNBLFNBQUtDLE9BQUwsR0FBZUUsQ0FBQyxDQUFDQyxNQUFGLENBQVMsRUFBVCxFQUFhSCxPQUFiLEVBQXNCLEVBQXRCLENBQWY7QUFDQSxTQUFLSSxpQkFBTCxHQUF5QixLQUFLSCxXQUFMLEdBQW1CLFlBQTVDO0FBQ0EsU0FBS0ksS0FBTCxHQUFhTCxPQUFPLENBQUNLLEtBQVIsSUFBaUIsRUFBOUI7QUFDSDtBQUVEOzs7Ozs7OztrQ0FJYTtBQUNULFVBQUlILENBQUMsQ0FBQyxLQUFLRSxpQkFBTixDQUFELENBQTBCRSxNQUExQixJQUFvQyxDQUF4QyxFQUEwQztBQUN0Q0osU0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVSyxNQUFWLENBQWlCLGNBQWMsS0FBS0gsaUJBQW5CLEdBQXVDLFVBQXhEO0FBQ0g7O0FBRUQsV0FBS0ksYUFBTDtBQUNIO0FBRUQ7Ozs7Ozs7b0NBSWU7QUFDWCxVQUFJQyxJQUFJLEdBQUcsSUFBWDtBQUNBUCxPQUFDLENBQUMsS0FBS0UsaUJBQU4sQ0FBRCxDQUEwQk0sRUFBMUIsQ0FBNkIsT0FBN0IsRUFBc0MsR0FBdEMsRUFBMkMsWUFBVTtBQUNqRCxZQUFJQyxTQUFTLEdBQUdDLEtBQUssQ0FBQ0MsTUFBdEI7QUFDQSxZQUFJQyxhQUFhLEdBQUdILFNBQVMsQ0FBQ0ksT0FBVixDQUFrQkMsSUFBdEM7QUFDQVAsWUFBSSxDQUFDVCxPQUFMLENBQWFpQixNQUFiLElBQXVCUixJQUFJLENBQUNULE9BQUwsQ0FBYWlCLE1BQWIsQ0FBb0JmLENBQUMsQ0FBQ08sSUFBSSxDQUFDUixXQUFOLENBQXJCLEVBQXlDYSxhQUF6QyxDQUF2QjtBQUNILE9BSkQ7QUFLSDtBQUVEOzs7Ozs7MkJBR007QUFDRlosT0FBQyxDQUFDLEtBQUtFLGlCQUFOLENBQUQsQ0FBMEJjLElBQTFCO0FBQ0g7QUFFRDs7Ozs7OzRCQUdPO0FBQ0hoQixPQUFDLENBQUMsS0FBS0UsaUJBQU4sQ0FBRCxDQUEwQmUsSUFBMUI7QUFDSDs7OzZCQUVRZCxLLEVBQU07QUFDWCxXQUFLQSxLQUFMLEdBQWFBLEtBQWI7QUFDQSxXQUFLZSxZQUFMO0FBQ0g7OzttQ0FFYTtBQUNWLFVBQUlDLElBQUksR0FBRyxhQUFhLEtBQUtoQixLQUFMLENBQVdpQixHQUFYLENBQWUsVUFBU0MsSUFBVCxFQUFlO0FBQ2xELGVBQU8sMkJBQTJCQSxJQUEzQixHQUFrQyxJQUFsQyxHQUF5Q0EsSUFBekMsR0FBZ0QsTUFBdkQ7QUFDSCxPQUZ1QixFQUVyQkMsTUFGcUIsQ0FFZCxVQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxlQUFVRCxDQUFDLEdBQUcsV0FBSixHQUFrQkMsQ0FBNUI7QUFBQSxPQUZjLENBQWIsR0FFZ0MsV0FGM0M7QUFJQXhCLE9BQUMsQ0FBQyxLQUFLRSxpQkFBTixDQUFELENBQTBCaUIsSUFBMUIsQ0FBK0JBLElBQS9CO0FBQ0g7OzsyQkFFTWhCLEssRUFBTTtBQUNULFdBQUtzQixRQUFMLENBQWN0QixLQUFkO0FBQ0EsV0FBS3VCLElBQUw7QUFDSDs7Ozs7Ozs7QUNoRUw7Ozs7QUFJQSxJQUFJQyxRQUFKLEVBQWNDLGVBQWQ7O0FBRUEsU0FBU0MsZUFBVCxDQUF5QkMsSUFBekIsRUFBOEI7QUFDMUIsTUFBSUMsS0FBSyxHQUFHL0IsQ0FBQyxDQUFDZ0MsUUFBRixFQUFaO0FBQ0EsTUFBSUMsT0FBTyxHQUFHLENBQUMsUUFBRCxFQUFXLGFBQVgsRUFBMEIsUUFBMUIsQ0FBZDtBQUNBLE1BQUlDLFNBQVMsR0FBRztBQUNaSixRQUFJLEVBQUVBLElBRE07QUFFWkcsV0FBTyxFQUFFQSxPQUFPLENBQUNiLEdBQVIsQ0FBWSxVQUFBRyxDQUFDO0FBQUEsYUFBSUEsQ0FBQyxDQUFDWSxPQUFGLENBQVUsR0FBVixFQUFlTCxJQUFmLENBQUo7QUFBQSxLQUFiLElBQXlDLENBQUNBLElBQUQ7QUFGdEMsR0FBaEIsQ0FIMEIsQ0FRMUI7O0FBQ0FwQyxZQUFVLENBQUMsWUFBVTtBQUNqQnFDLFNBQUssQ0FBQ0ssT0FBTixDQUFjRixTQUFkO0FBQ0gsR0FGUyxFQUVQRyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEdBQWMsSUFBekIsQ0FGTyxDQUFWO0FBSUEsU0FBT1IsS0FBSyxDQUFDUyxPQUFOLEVBQVA7QUFDSDtBQUdEOzs7OztBQUdBLFNBQVNDLGNBQVQsQ0FBd0JYLElBQXhCLEVBQTZCO0FBRXpCLE1BQUdGLGVBQUgsRUFBb0I7QUFDaEJjLFlBQVEsQ0FBQ1osSUFBRCxDQUFSO0FBQ0EsV0FBT0YsZUFBUDtBQUNIOztBQUVELE1BQUlHLEtBQUssR0FBRyxJQUFJL0IsQ0FBQyxDQUFDZ0MsUUFBTixFQUFaO0FBQ0FKLGlCQUFlLEdBQUdHLEtBQUssQ0FBQ1MsT0FBTixFQUFsQjtBQUNBYixVQUFRLEdBQUdHLElBQVg7O0FBRUEsV0FBU1ksUUFBVCxDQUFrQkMsR0FBbEIsRUFBc0I7QUFDbEJkLG1CQUFlLENBQUNjLEdBQUQsQ0FBZixDQUFxQkMsSUFBckIsQ0FBMEIsVUFBU0MsR0FBVCxFQUFhO0FBQ25DLFVBQUdBLEdBQUcsSUFBSUEsR0FBRyxDQUFDZixJQUFKLElBQVlILFFBQXRCLEVBQStCO0FBQzNCSSxhQUFLLENBQUNLLE9BQU4sQ0FBY1MsR0FBRyxDQUFDWixPQUFsQjtBQUNIOztBQUVETCxxQkFBZSxHQUFHLElBQWxCO0FBQ0FELGNBQVEsR0FBRyxJQUFYO0FBQ0gsS0FQRDtBQVFIOztBQUVEZSxVQUFRO0FBQ1IsU0FBT2QsZUFBUDtBQUNIOzs7O0FDbEREOzs7QUFJQTtBQUNBO0FBQ0E7O0FBRUFrQixNQUFNLENBQUNDLE1BQVAsR0FBZ0IsWUFBVTtBQUN0QixNQUFJQyxZQUFZLEdBQUcsSUFBSXBELFlBQUosQ0FBaUIsWUFBakIsRUFBK0I7QUFDOUNtQixVQUFNLEVBQUVrQztBQURzQyxHQUEvQixDQUFuQixDQURzQixDQUt0Qjs7QUFDQWpELEdBQUMsQ0FBQyxZQUFELENBQUQsQ0FBZ0JRLEVBQWhCLENBQW1CLE9BQW5CLEVBQTRCckIsUUFBUSxDQUFDLFVBQVN1QixLQUFULEVBQWdCd0MsRUFBaEIsRUFBbUI7QUFFcEQsUUFBSUMsUUFBUSxHQUFHekMsS0FBSyxDQUFDQyxNQUFOLENBQWF5QyxjQUE1QjtBQUNBLFFBQUlDLE1BQU0sR0FBRzNDLEtBQUssQ0FBQ0MsTUFBTixDQUFhMkMsWUFBMUI7QUFDQSxRQUFJQyxLQUFLLEdBQUd2RCxDQUFDLENBQUNVLEtBQUssQ0FBQ0MsTUFBUCxDQUFELENBQWdCNkMsR0FBaEIsRUFBWjtBQUVBLFFBQUlDLG1CQUFKOztBQUNBLFFBQUlOLFFBQVEsSUFBSUUsTUFBWixJQUFzQkEsTUFBTSxJQUFJRSxLQUFLLENBQUNuRCxNQUExQyxFQUFpRDtBQUM3QztBQUNBO0FBQ0FxRCx5QkFBbUIsR0FBR0YsS0FBSyxDQUFDRyxLQUFOLENBQVksR0FBWixFQUFpQkMsR0FBakIsRUFBdEI7QUFDSCxLQUpELE1BSU87QUFDSDtBQUNBO0FBQ0FGLHlCQUFtQixHQUFHRixLQUFLLENBQUNLLE1BQU4sQ0FBYVQsUUFBYixFQUF1Qk8sS0FBdkIsQ0FBNkIsR0FBN0IsRUFBa0NDLEdBQWxDLENBQXNDLENBQXRDLENBQXRCO0FBQ0g7O0FBQUE7QUFFRGxCLGtCQUFjLENBQUNnQixtQkFBRCxDQUFkLENBQW9DYixJQUFwQyxDQUF5QyxVQUFTWCxPQUFULEVBQWlCO0FBQ3REZSxrQkFBWSxDQUFDYSxXQUFiLENBQXlCNUIsT0FBekI7QUFDSCxLQUZEO0FBS0gsR0F0Qm1DLEVBc0JqQyxHQXRCaUMsQ0FBcEM7O0FBd0JBLE1BQUlnQixtQkFBbUIsR0FBRyxTQUF0QkEsbUJBQXNCLENBQVNhLEdBQVQsRUFBY0MsWUFBZCxFQUEyQjtBQUNqRCxRQUFJQyxhQUFhLEdBQUdGLEdBQUcsQ0FBQ04sR0FBSixFQUFwQjtBQUNBLFFBQUlTLE1BQU0sR0FBR0QsYUFBYSxDQUFDTixLQUFkLENBQW9CLEdBQXBCLENBQWI7QUFDQSxRQUFJOUMsYUFBYSxHQUFHbUQsWUFBcEIsQ0FIaUQsQ0FLakQ7O0FBQ0EsUUFBSUcsY0FBYyxHQUFHSixHQUFHLENBQUNLLElBQUosQ0FBUyxRQUFULENBQXJCOztBQUNBLFFBQUdELGNBQWMsSUFBSUYsYUFBYSxDQUFDNUQsTUFBbkMsRUFBMkM7QUFDdkM2RCxZQUFNLENBQUNOLEdBQVA7QUFDQU0sWUFBTSxDQUFDRyxJQUFQLENBQVlMLFlBQVo7QUFDQU0sWUFBTSxHQUFHSixNQUFNLENBQUNLLElBQVAsQ0FBWSxHQUFaLENBQVQ7QUFDSDs7QUFFRCxRQUFJQyxNQUFNLEdBQUdQLGFBQWEsQ0FBQ0osTUFBZCxDQUFxQixDQUFyQixFQUF1Qk0sY0FBdkIsRUFBdUNNLFdBQXZDLENBQW1ELEdBQW5ELENBQWI7QUFDQSxRQUFJQyxLQUFLLEdBQUdULGFBQWEsQ0FBQ0osTUFBZCxDQUFxQk0sY0FBckIsRUFBcUNRLE9BQXJDLENBQTZDLEdBQTdDLENBQVo7O0FBQ0EsUUFBR0gsTUFBTSxJQUFJLENBQUMsQ0FBZCxFQUFnQjtBQUNaRixZQUFNLEdBQUdMLGFBQWEsQ0FBQ0osTUFBZCxDQUFxQixDQUFyQixFQUF3QlcsTUFBeEIsSUFBa0MsR0FBM0M7QUFDSDs7QUFDREYsVUFBTSxHQUFHTixZQUFUOztBQUNBLFFBQUdVLEtBQUssSUFBSSxDQUFDLENBQWIsRUFBZTtBQUNYSixZQUFNLEdBQUdMLGFBQWEsQ0FBQ0osTUFBZCxDQUFxQixDQUFyQixFQUF3QmEsS0FBeEIsQ0FBVDtBQUNIOztBQUVEWCxPQUFHLENBQUNQLEtBQUosQ0FBVWMsTUFBVixFQXZCaUQsQ0F3QmpEOztBQUNBckIsZ0JBQVksQ0FBQzJCLEtBQWI7QUFDSCxHQTFCRDtBQTJCSCxDQXpERCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZW5lcmljIGRlYm91bmNlIHV0aWxpdHlcbiAqIFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gXG4gKiBAcGFyYW0ge0ludH0gdGltZW91dCBcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZm4sIHRpbWVvdXQpe1xuICAgIGNvbnN0IHRpbWVySW50ZXJ2YWwgPSB0aW1lb3V0O1xuICAgIGxldCB0aW1lcjtcbiAgICBcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncyl7XG4gICAgICAgIGlmKCF0aW1lcil7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7ICAgICBcbiAgICAgICAgfSwgdGltZXJJbnRlcnZhbClcbiAgICB9XG59XG5cbmV4cG9ydCB7XG4gICAgZGVib3VuY2Vcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRvY29tcGxldGUge1xuICAgXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIG9wdGlvbnMpe1xuICAgICAgICB0aGlzLmVsZXNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBvcHRpb25zLCB7fSlcbiAgICAgICAgdGhpcy5jb250YWluZXJTZWxlY3RvciA9IHRoaXMuZWxlc2VsZWN0b3IgKyAnLWNvbnRhaW5lcic7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBvcHRpb25zLml0ZW1zIHx8IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBET00gZm9yIHRoZSBhdXRvY29tcGxldGUuIERvZXMgdGhoaXNcbiAgICAgKiBlYWdlcmx5IGluc3RlYWQgb2Ygb24tZGVtYW5kL29uIHRoZSBmbHkuXG4gICAgICovXG4gICAgX2luaXRpYWxpemUoKXtcbiAgICAgICAgaWYgKCQodGhpcy5jb250YWluZXJTZWxlY3RvcikubGVuZ3RoID09IDApe1xuICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZCgnPGRpdiBpZD1cIicgKyB0aGlzLmNvbnRhaW5lclNlbGVjdG9yICsgJ1wiPjwvZGl2PicpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9hdHRhY2hFdmVudHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBoYW5kbGVzIG9ubHkgdGhlIGNsaWNrL3NlbGVjdCBldmVudC4gSG93ZXZlciB3ZSBjYW5cbiAgICAgKiBoYW5kbGUga2V5Ym9hcmQgbmF2aWFndGlvbiB0byBtb3ZlIHVwL2Rvd24uXG4gICAgICovXG4gICAgX2F0dGFjaEV2ZW50cygpe1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICQodGhpcy5jb250YWluZXJTZWxlY3Rvcikub24oJ2NsaWNrJywgJ2EnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgdmFyIHRhcmdldEVsZSA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZFZhbHVlID0gdGFyZ2V0RWxlLmRhdGFzZXQubmFtZTtcbiAgICAgICAgICAgIHRoYXQub3B0aW9ucy5zZWxlY3QgJiYgdGhhdC5vcHRpb25zLnNlbGVjdCgkKHRoYXQuZWxlc2VsZWN0b3IpLCBzZWxlY3RlZFZhbHVlKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgT3BlbnMgdGhlIGF1dG9jb21wbGV0ZSBsaXN0XG4gICAgICovXG4gICAgb3Blbigpe1xuICAgICAgICAkKHRoaXMuY29udGFpbmVyU2VsZWN0b3IpLnNob3coKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZSB0aGUgYXV0b2NvbXBsZXRlIGxpc3QuXG4gICAgICovXG4gICAgY2xvc2UoKXtcbiAgICAgICAgJCh0aGlzLmNvbnRhaW5lclNlbGVjdG9yKS5oaWRlKCk7XG4gICAgfVxuXG4gICAgc2V0SXRlbXMoaXRlbXMpe1xuICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVMaXN0KCk7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVMaXN0KCl7XG4gICAgICAgIHZhciBodG1sID0gXCI8dWw+PGxpPlwiICsgdGhpcy5pdGVtcy5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiPGEgaHJlZj0nJyBkYXRhLW5hbWU9J1wiICsgaXRlbSArIFwiJz5cIiArIGl0ZW0gKyBcIjwvYT5cIlxuICAgICAgICB9KS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBcIjwvbGk+PGxpPlwiICsgYikgKyBcIjwvbGk+PHVsPlwiXG5cbiAgICAgICAgJCh0aGlzLmNvbnRhaW5lclNlbGVjdG9yKS5odG1sKGh0bWwpXG4gICAgfVxuXG4gICAgcmVuZGVyKGl0ZW1zKXtcbiAgICAgICAgdGhpcy5zZXRJdGVtcyhpdGVtcyk7XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbn1cbiIsIi8qKlxuICogQHBhcmFtIHdvcmQgdG8gZ2V0IHRoZSBzdWdnZXN0aW9uIGZyb21cbiAqIEByZXR1cm5zIFByb21pc2UgXG4gKi9cbnZhciBsYXN0V29yZCwgbGFzdFdvcmRQcm9taXNlO1xuXG5mdW5jdGlvbiB3b3JkU3VnZ2VzdGlvbnMod29yZCl7ICBcbiAgICB2YXIgZGVmZXIgPSAkLkRlZmVycmVkKCk7XG4gICAgdmFyIG1hdGNoZXMgPSBbJ19wcmVfJCcsICdfcHJlXyRfcG9zdCcsICckX3Bvc3QnXTtcbiAgICB2YXIgdG9fcmV0dXJuID0ge1xuICAgICAgICB3b3JkOiB3b3JkLFxuICAgICAgICBtYXRjaGVzOiBtYXRjaGVzLm1hcChhID0+IGEucmVwbGFjZSgnJCcsIHdvcmQpKSArIFt3b3JkXVxuICAgIH1cblxuICAgIC8vcmFuZG9tIHRpbWVvdXRcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgIGRlZmVyLnJlc29sdmUodG9fcmV0dXJuKVxuICAgIH0sIE1hdGguZmxvb3IoTWF0aC5yYW5kb20gKiAxMDAwKSk7XG5cbiAgICByZXR1cm4gZGVmZXIucHJvbWlzZSgpO1xufVxuXG5cbi8qKlxuICogaGFubGRlcyB0aGUgb3V0IG9mIG9yZGVyIHN1Z2dlc3Rpb25zIHByb3Blcmx5LlxuICovXG5mdW5jdGlvbiBnZXRTdWdnZXN0aW9ucyh3b3JkKXtcbiAgICBcbiAgICBpZihsYXN0V29yZFByb21pc2UpIHtcbiAgICAgICAgZ2V0V29yZHMod29yZCk7XG4gICAgICAgIHJldHVybiBsYXN0V29yZFByb21pc2U7XG4gICAgfVxuXG4gICAgbGV0IGRlZmVyID0gbmV3ICQuRGVmZXJyZWQoKTtcbiAgICBsYXN0V29yZFByb21pc2UgPSBkZWZlci5wcm9taXNlKCk7XG4gICAgbGFzdFdvcmQgPSB3b3JkO1xuXG4gICAgZnVuY3Rpb24gZ2V0V29yZHMod3JkKXtcbiAgICAgICAgd29yZFN1Z2dlc3Rpb25zKHdyZCkuZG9uZShmdW5jdGlvbihyZXMpe1xuICAgICAgICAgICAgaWYocmVzICYmIHJlcy53b3JkID09IGxhc3RXb3JkKXtcbiAgICAgICAgICAgICAgICBkZWZlci5yZXNvbHZlKHJlcy5tYXRjaGVzKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsYXN0V29yZFByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgbGFzdFdvcmQgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRXb3JkcygpO1xuICAgIHJldHVybiBsYXN0V29yZFByb21pc2U7XG59XG5cbmV4cG9ydCB7XG4gICAgZ2V0U3VnZ2VzdGlvbnNcbn0iLCIvKipcbiAqIEluaXRpYWxpemVyXG4gKi9cblxuaW1wb3J0IHtkZWJvdW5jZX0gZnJvbSAnLi91dGlsLmpzJ1xuaW1wb3J0IEF1dG9jb21wbGV0ZSBmcm9tICcuL2F1dG9jb21wbGV0ZS5qcydcbmltcG9ydCB7Z2V0U3VnZ2VzdGlvbnN9IGZyb20gJy4vU3VnZ2VzdGlvbi5qcydcblxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGF1dG9Db21wbGV0ZSA9IG5ldyBBdXRvY29tcGxldGUoJyNzZWFyY2hCb3gnLCB7XG4gICAgICAgIHNlbGVjdDogYXV0b0NvbXBsZXRTZWxlY3RvclxuICAgIH0pO1xuXG4gICAgLy8gZGVib3VuY2UgaXQgZm9yIDEwMG1zXG4gICAgJCgnI3NlYXJjaEJveCcpLm9uKCdrZXl1cCcsIGRlYm91bmNlKGZ1bmN0aW9uKGV2ZW50LCB1aSl7XG5cbiAgICAgICAgdmFyIHNlbFN0YXJ0ID0gZXZlbnQudGFyZ2V0LnNlbGVjdGlvblN0YXJ0O1xuICAgICAgICB2YXIgc2VsRW5kID0gZXZlbnQudGFyZ2V0LnNlbGVjdGlvbkVuZDtcbiAgICAgICAgdmFyIHZhbHVlID0gJChldmVudC50YXJnZXQpLnZhbCgpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHdvcmRUb0dldFN1Z2dlc3Rpb247XG4gICAgICAgIGlmIChzZWxTdGFydCA9PSBzZWxFbmQgJiYgc2VsRW5kID09IHZhbHVlLmxlbmd0aCl7XG4gICAgICAgICAgICAvL2N1cnNvciBpcyBhdCB0aGUgbGFzdCBwb3NpdGlvblxuICAgICAgICAgICAgLy9nZXQgdGhlIGxhc3Qgd29yZC5cbiAgICAgICAgICAgIHdvcmRUb0dldFN1Z2dlc3Rpb24gPSB2YWx1ZS5zcGxpdCgnICcpLnBvcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9pZiBzZWxlY3Rpb24gaGFzIG11bHRpcGxlIHdvcmRzLCB0aGVuIHdlIGdldCB0aGVcbiAgICAgICAgICAgIC8vZmlyc3Qgd29yZFxuICAgICAgICAgICAgd29yZFRvR2V0U3VnZ2VzdGlvbiA9IHZhbHVlLnN1YnN0cihzZWxTdGFydCkuc3BsaXQoJyAnKS5wb3AoMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZ2V0U3VnZ2VzdGlvbnMod29yZFRvR2V0U3VnZ2VzdGlvbikuZG9uZShmdW5jdGlvbihtYXRjaGVzKXtcbiAgICAgICAgICAgIGF1dG9Db21wbGV0ZS5yZW5kZXJJdGVtcyhtYXRjaGVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuXG4gICAgfSwgMTAwKSk7XG5cbiAgICB2YXIgYXV0b0NvbXBsZXRTZWxlY3RvciA9IGZ1bmN0aW9uKGVsZSwgc2VsZWN0ZWRJdGVtKXtcbiAgICAgICAgdmFyIGV4aXN0aW5nVmFsdWUgPSBlbGUudmFsKCk7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBleGlzdGluZ1ZhbHVlLnNwbGl0KCcgJyk7XG4gICAgICAgIHZhciBzZWxlY3RlZFZhbHVlID0gc2VsZWN0ZWRJdGVtO1xuXG4gICAgICAgIC8vIHN0b3JlIHRoZSBsYXN0IGN1cnNvciBwb3NpdGlvbiwgXG4gICAgICAgIHZhciBjdXJzb3JQb3NpdGlvbiA9IGVsZS5kYXRhKCdjdXJzb3InKTtcbiAgICAgICAgaWYoY3Vyc29yUG9zaXRpb24gPT0gZXhpc3RpbmdWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhbHVlcy5wb3AoKTtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHNlbGVjdGVkSXRlbSk7XG4gICAgICAgICAgICB0b19zZXQgPSB2YWx1ZXMuam9pbignICcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJlZm9yZSA9IGV4aXN0aW5nVmFsdWUuc3Vic3RyKDAsY3Vyc29yUG9zaXRpb24pLmxhc3RJbmRleE9mKCcgJyk7XG4gICAgICAgIHZhciBhZnRlciA9IGV4aXN0aW5nVmFsdWUuc3Vic3RyKGN1cnNvclBvc2l0aW9uKS5pbmRleE9mKCcgJyk7XG4gICAgICAgIGlmKGJlZm9yZSAhPSAtMSl7XG4gICAgICAgICAgICB0b19zZXQgPSBleGlzdGluZ1ZhbHVlLnN1YnN0cigwLCBiZWZvcmUpICsgJyAnXG4gICAgICAgIH1cbiAgICAgICAgdG9fc2V0ID0gc2VsZWN0ZWRJdGVtXG4gICAgICAgIGlmKGFmdGVyICE9IC0xKXtcbiAgICAgICAgICAgIHRvX3NldCA9IGV4aXN0aW5nVmFsdWUuc3Vic3RyKDAsIGFmdGVyKVxuICAgICAgICB9XG5cbiAgICAgICAgZWxlLnZhbHVlKHRvX3NldCk7XG4gICAgICAgIC8vIGFmdGVyIHNlbGVjdGluZyBpdCBjbG9zZSBpdC5cbiAgICAgICAgYXV0b0NvbXBsZXRlLmNsb3NlKCk7XG4gICAgfVxufVxuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")}]);